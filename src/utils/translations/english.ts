export default {
  general: {
    openFile: 'Open File',
    import: 'Import',
    export: 'Export',
    menuLabels: 'Menu labels',
    confirm: 'Confirm',
    cancel: 'Cancel',
    open: 'Open',
    close: 'Close',
    enterName: 'Enter Name',
    enterText: 'Enter Text',
    inputField: 'Input Field',
    name: 'Name',
    date: 'Date',
    download: 'Download',
    delete: 'Delete'
  },
  assetEditor: {
    title: 'Ergonom.io Asset',
    description: 'Asset editing tool for ergonom.io',
    openAsset: 'Open Asset',
    assetData: 'Asset Data',
    applyTransform: 'Apply Transform',
    switchAxisMode: 'Switch Axis Mode',
    switchSnapMode: 'switch Snap Mode',
    applyScale: 'Apply Scale',
    captureImage: 'Capture Image',
    saveOnAPI: 'Save On API'
  },
  blueprintEditor: {
    title: 'Blueprint Editor',
    description: 'Tool for drawing building plan and export it in 3D',
    openFile: 'Open File',
    defineScale: 'Define Scale',
    defineScalePlaceholder: 'enter reference distance (in meters):',
    exportGLTF: 'Export GLTF',
    saveBlueprint: 'Save Blueprint',
    saveScene: 'Save Scene',
    selectFurniture: 'Select Furniture',
    placeFurniture: 'Place Furniture',
    placeWall: 'Place Wall',
    removeWall: 'Remove Wall'
  },
  constraintAnalysis: {
    title: 'Contradiction Analysis',
    description: 'Contradiction analysis via a expert approach',
    openFile: 'Open File',
    saveShape: 'Save Shape',
    loadShape: 'Load Shape',
    layouts: 'Layouts',
    downloadImage: 'Download Image',
    defaultLayout: 'Default Layout',
    verticalHierarchy: 'Vertical Hierarchy',
    horizontalHierarchy: 'Horiziontal Hierarchy',
    circle: 'Circle',
    horizontalOrdering: 'Horizontal Ordering'
  },
  selectPopUp: {
    selectItem: 'Select Item'
  },
  behaviours: {
    category: {
      miscellaneous: 'Miscellaneous',
      wall: 'Wall'
    },
    walldoor: {
      name: 'Door',
      fields: {
        width: 'width',
        top: 'top'
      }
    },
    wallwindow: {
      name: 'Window',
      fields: {
        width: 'width',
        top: 'top',
        bottom: 'bottom'
      }
    }
  },
  routingAnalysis: {
    title: 'Routing Analysis',
    description:
      'Routing analysis using algorithmic operations related to graph management.',
    saveRoutingGraph: 'Save Routing Graph',
    showHideFeedbacklink: 'Show/Hide Feedback Link',
    showHideTransitiveLink: 'Show/Hide Transitive Link',
    levelLayout: 'Level Layout',
    clusteringPartMachine: 'Clustering Part/Machine',
    clusteringMachineMachine: 'Clustering Machine/Machine',
    showMatrix: 'Show Matrix',
    defaultRoutingGraphName: 'unnamed routing graph',
    importFileType: 'Import File Type',
    exportFileType: 'Export File Type',
    routingFile: 'Routing File',
    partMachineMatrix: 'Part/Machine Matrix',
    machineMachineMatrix: 'Machine/Machine Matrix',
    machineOrderMatrix: 'Machine Order Matrix',
    clustering: 'Clustering',
    alpha: 'Alpha',
    interclassRatio: 'Interclass ratio (%)',
    nbClass: 'Number of Class',
    matrixType: 'Matrix type'
  },
  gestureAnalysis: {
    gestureAnalysis: 'Gesture Analysis',
    openClassicBVH: 'Open classic BVH',
    openBlenderBVH: 'Open blender BVH',
    toggleAvatar: 'Toggle Avatar',
    inputSkeleton: 'Input skeleton',
    outputSkeleton: 'Output skeleton',
    addAsset: 'Add asset',
    toggleTransform: 'Toggle transform',
    resetTransform: 'Reset transform',
    toggleRULAMArkers: 'Toggle RULA markers',
    toggleAngleInspector: 'Toggle angle inspector',
    getCSVData: 'Get CSV data',
    getXLSMAnalyser: 'Get XLSM analyser',
    time: 'TIME',
    menuLabels: 'Menu labels'
  },
  assetLibrary: {
    assetLibrary: 'Asset Library',
    listOfAllAssets: 'List of all assets',
    resetFilter: 'Reset filter',
    displayTags: 'Display tags',
    categories: 'Categories',
    loadAnAsset: 'Load an asset',
    deleteModeAsset: 'Delete mode asset',
    assetData: 'Asset data',
    name: 'Name',
    tags: 'Tags',
    cancel: 'Cancel',
    save: 'Save',
    newTitle: 'New title',
    newTags: 'New tags',
    uploadNew: 'Upload new',
    uCantUse: "You can't use the asset manager in multiplayer"
  },
  dynamicsObject: {
    dynamicsObjects: 'Dynamics objects',
    oPCUA: 'OPC UA',
    startProfil: 'Start profil',
    startGlobalProfil: 'Start global profil',
    selectedPathAsset: 'Selected path asset',
    globalPath: 'Global path',
    loadAProfilFile: 'Load a profil file',
    editTheCurrentProfil: 'Edit the current profil',
    deleteProfil: 'Delete profil',
    addAnEvent: 'Add an event',
    attachAnObject: 'Attach an object',
    listenIdOfServer: 'Listen id of server',
    assignAProfilToScene: 'Assign a profil to scene',
    selectedProfil: 'Selected profil',
    selectedScene: 'Selected scene',
    title: 'Title',
    saveProfil: 'Save profil',
    position: 'Position',
    rotation: 'Rotation',
    objetDynamicSelected: 'Selected dynamic object'
  },
  scenes: {
    scenes: 'Scenes',
    sceneManagement: 'Scene management',
    yourScenes: 'Your scenes',
    assetsNumber: 'assets number',
    owner: 'owner',
    openInLayout: 'Open in layout',
    openInVirtualTwin: 'Open in virtual twin',
    createNewEmptyScene: 'Create new empty scene',
    loadScene: 'Load scene',
    addObjectInScene: 'Add object in scene',
    saveCurrentScene: 'Save current scene',
    backToHome: 'Back to home',
    targetScene: 'Target scene',
    glisserJson: 'Drag and drop a JSON file here or click to select a file',
    modifyData: 'Modify data',
    doCopyOfScene: 'Do copy of scene',
    profil: 'Profil'
  },
  rooms: {
    collaborativesSessions: 'Collaboratives sessions',
    forVirtualMeetings: 'For virtual meetings',
    currentSession: 'Current session',
    leaveSession: 'Leave session',
    createNewSession: 'Create new session',
    selectedScene: 'Selected scene',
    deleteSession: 'Delete session',
    roomToDelete: 'Room to delete',
    tokenRoom: 'Token room',
    close: 'Close',
    joinRoomWithToken: 'Join room with token',
    join: 'Join',
    scene: 'Scene'
  },
  mainMenu: {
    groups: 'Groups',
    files: 'Files',
    dynamicsObjects: 'Dynamics objects',
    scenes: 'Scenes',
    assetsLibrary: 'Assets library',
    gestureAnalysis: 'Gesture analysis',
    collaborativeSessions: 'Collaborative sessions',
    aboutContradiction: 'About contradiction',
    expertApproach: 'Expert approach',
    simulationApproach: 'Simulation approach',
    aboutRoutingAnalysis: 'About routing analysis',
    routingAnalysis: 'Routing analysis',
    blueprintEditor: 'Blueprint editor',
    input: 'Input',
    output: 'Output',
    aboutErgonomIO: 'About ErgonomIO',
    virtualTwin: 'Virtual twin',
    assetEditor: 'Asset editor',
    avatars: 'Avatars',
    database: 'Database',
    API: 'API',
    help: 'Help',
    codeStructure: 'Code structure',
    ergonomioLogin: 'ErgonomIO login',
    ergonomioMainMenu: 'ErgonomIO main menu',
    home: 'Home',

    // Subnames
    groupManagement: 'Groups management',
    fileManagement: 'Files management',
    akaDrawingShop: 'a.k.a. Drawing Shop',
    shareDynamicsFiles: 'share Dynamics Files',
    DynamicsAnalysis: 'Dynamics analysis',
    VirtualRealityTool: 'Virtual reality tool',
    ToolForErgonomicAnalysis: 'Tool for ergonomic analysis',
    SceneManagement: 'Scene management',
    ListOfAllAssets: 'List of all assets',
    UploadEditAssets: 'Upload & edit assets',
    ForVirtualMeetings: 'For virtual meetings',
    OPCUA: 'OPC UA',
    ManageYourAvatars: 'Manage your avatars',
    ProfilesManager: 'Profiles manager',
    ShowDatabaseStructure: 'Show database structure',
    InterfaceDocumentation: 'Interface documentation',
    ApplicationsGuide: 'Applications guide',
    OfVueProject: 'Of vue project',
    ErgonomicsLogin: 'Ergonomics login',
    ErgonomicsAndFlowAnalysis: 'Ergonomics and flow analysis'
  },
  application: {
    ergonomio: 'Ergonom.io',
    routinganalysis: 'Routing Analysis',
    blueprinteditor: 'Blueprint Editor',
    ergonomioanalysis: 'Ergonom.io Analysis',
    contradictionanalysis: 'Contradiction Analysis',
    dynamicsinput: 'Dynamics Input',
    dynamicsoutput: 'Dynamics Output'
  }
}
